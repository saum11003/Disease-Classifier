# -*- coding: utf-8 -*-
"""ML-PROJECT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ROryFtteiFpmXHx3Jqv_gPYELIC84jB2
"""

d#import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import string
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from wordcloud import WordCloud

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier

#read data
df = pd.read_csv("Symptom-Disease.csv")
df.drop("Unnamed: 0",inplace=True,axis=1)

df

df.head(10)

"""## Get to know about data."""

df.shape

df.describe()

df["label"].describe()

df.info()

df.isnull().sum()

df[df.isnull().any(axis=1)]

for col in df.columns:
    print(col,": ",df[col].unique(),"\n")

"""## Lets clean data"""

nltk.download('punkt')
nltk.download('stopwords')

#set of English stop words
stop_words = set(stopwords.words('english'))

def clean_text(sent):
    #remove punctuations
    sent = sent.translate(str.maketrans('','',string.punctuation)).strip()

    #remove stopwords
    stop_words = set(stopwords.words('english'))
    words = word_tokenize(sent)
    words = [word for word in words if word not in stop_words]

    return " ".join(words).lower()

# apply clean_text on text column of df
df["text"] = df["text"].apply(clean_text)

"""Vizualize text content"""

# create word cloud to vizualize frequent words in our dataset
all_text = " ".join(df["text"])
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(all_text)


# Plotting Word Cloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.show()

#Split data into train and test set
X_train, X_test, y_train, y_test = train_test_split(df["text"], df["label"], test_size=0.2, random_state=42)

"""### Text Vectorization

"""

# use tfidf for text vectorization
tfidf_vectorizer = TfidfVectorizer(max_features=1500)

tfidf_train = tfidf_vectorizer.fit_transform(X_train).toarray()
tfidf_test = tfidf_vectorizer.transform(X_test).toarray()

"""### Model Selection

KNN
"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(tfidf_train, y_train)

predictions = knn.predict(tfidf_test)

def report(y_test,predictions):
    """Function to create classification report"""
    accuracy = accuracy_score(y_test, predictions)
    print(f'Accuracy: {accuracy:.2f}')
    print(classification_report(y_test, predictions))

report(y_test,predictions)

def make_pred(model,text):
    """Function to make prediction on single data instance"""
    text = clean_text(text)
    tfidf = tfidf_vectorizer.transform([text]).toarray()
    disease = model.predict(tfidf)

    return disease[0]

"""testing the model on some real data examples that are input by us"""

symp1 = "Yellowing of skin and eyes, fatigue"
make_pred(knn,symp1)

symp2 = "I noticed a sudden onset of high fever, along with a rash on my skin and severe pain behind my eyes."
make_pred(knn, symp2)

# some custom symptoms generated by Chat GPT
cust_symptoms = {
    #'Arthritis': ["I have joint pain, stiffness, and swelling.", "My joints are often red and warm to the touch."],
    # 'Acne': ["I'm getting frequent pimples, blackheads, and whiteheads.", "Sometimes I get big, red zits that hurt, and my skin is oily and easily irritated."],
    # 'Bronchial Asthma': ["I've been wheezing, coughing, and experiencing shortness of breath.", "My chest feels tight and I have difficulty breathing."],
    # 'Hypertension': ["I have high blood pressure, with no noticeable symptoms.", "Sometimes I get headaches and experience nosebleeds."],
    # 'Migraine': ["I have severe, throbbing headaches, often on one side of my head.", "I'm sensitive to light, sound, and sometimes experience nausea and vomiting."],
    # 'Cervical spondylosis': ["I have neck pain and stiffness, which can radiate to my shoulders and arms.", "I may also experience numbness or weakness in my extremities."],
    # 'Jaundice': ["I have yellowing of the skin and eyes.", "I've experienced fatigue, dark urine, and pale-colored stools."],
    'Fungal Infection': ["I have itchy, red patches of skin that may crack or peel.", "My skin feels moist and develops a rash, especially in warm and humid areas."],
    'Impetigo': ["I notice small, red sores or blisters that quickly burst and ooze fluid.", "The sores form a honey-colored crust and may be itchy or painful."],
    'Varicose Veins': ["I have bulging, twisted veins that are visible just beneath the skin's surface.", "My legs feel heavy or achy, especially after standing for long periods."],
    'Acne': ["I develop pimples, blackheads, and whiteheads on my face, neck, chest, or back.", "My skin may be oily and prone to inflammation, leading to redness and swelling."],
}

def custom_test(model):
    c = 0
    correct_count = 0
    for dis,symptoms in cust_symptoms.items():
        for symptom in symptoms:
            c += 1
            pred = make_pred(model,symptom)
            correct = pred.lower()==dis.lower()
            if correct: correct_count += 1
            print("Actual: ",dis,"\t Pred: ",pred,"--",correct)

    print("\nTotal: ",c,"\nCorrect: ",correct_count)

custom_test(knn)

from sklearn.metrics import confusion_matrix
import seaborn as sns

# Plot Confusion Matrix for KNN
cm_knn = confusion_matrix(y_test, predictions)
plt.figure(figsize=(10, 8))
sns.heatmap(cm_knn, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix for KNN')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

"""### SVM"""

#support vector machine
svm = SVC(kernel = 'linear', C = 1).fit(tfidf_train, y_train)
svm_pred = svm.predict(tfidf_test)

make_pred(svm,symp1)

custom_test(svm)

Report= classification_report(y_test,svm_pred)
print(Report)

make_pred(svm,symp1)

custom_test(svm)

# Plot Confusion Matrix for SVM
cm_svm = confusion_matrix(y_test, svm_pred)
plt.figure(figsize=(10, 8))
sns.heatmap(cm_svm, annot=True, fmt='d', cmap='Greens')
plt.title('Confusion Matrix for SVM')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

"""### Random Forest"""

rf = RandomForestClassifier(n_estimators=100, random_state=42).fit(tfidf_train, y_train)
rf_pred = rf.predict(tfidf_test)

make_pred(rf,symp1)
custom_test(rf)

report = classification_report(y_test, rf_pred)
print(report)

# Plot Confusion Matrix for Random Forest
cm_rf = confusion_matrix(y_test, rf_pred)
plt.figure(figsize=(10, 8))
sns.heatmap(cm_rf, annot=True, fmt='d', cmap='Reds')
plt.title('Confusion Matrix for Random Forest')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

"""## Decision Tree Classifier"""

from sklearn.tree import DecisionTreeClassifier

dtc = DecisionTreeClassifier()
dtc.fit(tfidf_train, y_train)
predictions_dtc = dtc.predict(tfidf_test)
import matplotlib.pyplot as plt

from sklearn import tree
import matplotlib.pyplot as plt
plt.figure(figsize=(200,100))
tree.plot_tree(dtc, feature_names=tfidf_vectorizer.get_feature_names_out(), class_names=df['label'].unique(), fontsize=10, filled=True)
plt.show()

# Evaluate the performance of the model
accuracy_dtc = accuracy_score(y_test, predictions_dtc)
print(f'Accuracy: {accuracy_dtc:.2f}')
print(classification_report(y_test, predictions_dtc))

# Make a prediction on a single data instance
def make_pred_dtc(model, text):
    text = clean_text(text)
    tfidf = tfidf_vectorizer.transform([text]).toarray()
    disease = model.predict(tfidf)
    return disease[0]

symp1 = "Yellowing of skin and eyes, fatigue"
print(make_pred_dtc(dtc, symp1))

symp2 = "I noticed a sudden onset of high fever, along with a rash on my skin and severe pain behind my eyes."
print(make_pred_dtc(dtc, symp2))

# Test the model on custom symptoms
custom_test(dtc)

cm_dtc = confusion_matrix(y_test, predictions_dtc)
plt.figure(figsize=(10, 8))

sns.heatmap(cm_dtc, annot=True, fmt='d', cmap='Oranges')
plt.title('Confusion Matrix for Decision Tree')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

print("KNN Accuracy:", accuracy_score(y_test, predictions) * 100, "%")
print("SVM Accuracy:", accuracy_score(y_test, svm_pred) * 100, "%")
print("Random Forest Accuracy:", accuracy_score(y_test, rf_pred) * 100, "%")
print("Decision Tree Accuracy:", accuracy_score(y_test, predictions_dtc) * 100, "%")

import matplotlib.pyplot as plt


models = ['KNN', 'SVM', 'Random Forest', 'Decision Tree']
accuracies = [accuracy_score(y_test, predictions) * 100,
              accuracy_score(y_test, svm_pred) * 100,
              accuracy_score(y_test, rf_pred) * 100,
              accuracy_score(y_test, predictions_dtc) * 100]

colors = ['blue', 'green', 'red', 'orange']

# Create a bar plot
plt.figure(figsize=(10, 5))
plt.bar(models, accuracies, color=colors)
plt.title('Model Accuracy Comparison')
plt.xlabel('Model')
plt.ylabel('Accuracy (%)')
plt.show()